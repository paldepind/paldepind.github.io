<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Behavior on Vindum</title>
    <link>http://vindum.io/tags/behavior/</link>
    <description>Recent content in Behavior on Vindum</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 May 2017 14:25:45 +0100</lastBuildDate>
    
	<atom:link href="http://vindum.io/tags/behavior/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Behaviors and streams, why both?</title>
      <link>http://vindum.io/blog/behaviors-and-streams-why-both/</link>
      <pubDate>Fri, 12 May 2017 14:25:45 +0100</pubDate>
      
      <guid>http://vindum.io/blog/behaviors-and-streams-why-both/</guid>
      <description>Introduction Functional reactive programming (FRP) has historically included two different abstractions over time: behavior and stream. Today most FRP and FRP-inspired libraries only have a single abstraction over time. This one abstraction is typically called &amp;ldquo;stream&amp;rdquo; or &amp;ldquo;observable&amp;rdquo;.
People used to these libraries may wonder: Why do I need both behavior and stream? I&amp;rsquo;m doing fine with just streams/observables. Asking that is natural. In fact, when I wrote my first FRP library Flyd I only included a single abstraction over time.</description>
    </item>
    
  </channel>
</rss>